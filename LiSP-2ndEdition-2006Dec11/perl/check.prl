#! /usr/local/bin/perl
# Check if a test is correct.
# Syntax:	check.prl resulting-file test-name
$usage = "Usage: check.prl resulting-file test-name" ;
# Given the name of the test, this script tries to know if the results are
# correct. Given tester.scm, single tests are correct but the interpreter
# stops as soon as it encounters an error. The name of the test allows to
# know what sort of test it is.

# Main:
if ( @ARGV == 2 ) {
   ($file,$test) = @ARGV ;
} else {
   die $usage ;
}

$_ = $test ;
# If the name of the test is normal then all tests should be done.
# In that case tester returns the symbol DONE.
$string = "= done" ;
# This is the case for tests that share allocation frame as in Lisp
$string = "The following test forces a continuation to return multiply" 
    if /shared\./ ;
# This is for shallow-binding in presence of Scheme continuation
$string = "shallow binding without unwind-protect when escaping"
    if /shallow\./ ;
# eval as a function fails to access the current lexical environment
$string = "eval as a function will fail"
    if /evalf\./ ;
# escape a la CommonLisp fail are not full Scheme continuations.
$string = "(to return multiply|out of their dynamic extent)"
    if /dynext\./ ;
# Don't inspect the result of a test prefixed by no. A no.test is 
# generally temporary, it is in the course of being fixed.
# a test prefixed by loop can only be done (and killed) by hand.
# A test prefixed  by big may fail because of memory.
if ( /(no|loop|big)\./ ) {
    print "\n\n\t\t$test is SKIPPED\n\n" ;
    exit 0 ;
};

# Scan the file until finding the string and exit accordingly
open(RESULT,"<$file");
while ( <RESULT> ) {
    if ( /$string/i ) {
        print "\n\n\t\t$test is SUCCESSFUL\n\n" ;
        exit 0 ;
    }
}
# If we arrive there then the test was wrong.
print "\n\n\t\tFAILING $test \n\n" ;
exit 1 ;

# end of check.prl
