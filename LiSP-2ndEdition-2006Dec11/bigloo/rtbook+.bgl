;;; $Id: rtbook+.bgl,v 1.4 1998/05/01 09:38:34 queinnec Exp $

;;;(((((((((((((((((((((((((((((((( L i S P ))))))))))))))))))))))))))))))))
;;; This file is part of the files that accompany the book:
;;;     LISP Implantation Semantique Programmation (InterEditions, France)
;;; By Christian Queinnec <Christian.Queinnec@INRIA.fr>
;;; Newest version may be retrieved from:
;;;   (IP 128.93.2.54) ftp.inria.fr:INRIA/Projects/icsla/Books/LiSP*.tar.gz
;;; Check the README file before using this file.
;;;(((((((((((((((((((((((((((((((( L i S P ))))))))))))))))))))))))))))))))

;;; This file defines some functions that should be included in programs
;;; compiled with the interpreter of the book. It is the second part
;;; completing rtbook.bgl.

(module rtbookp
        (eval (export-all))
        ;; additional utilities
        (include "bigloo/others/pp.scm")
        (include "bigloo/others/format.scm")
        ;; Time utility
        (foreign (int time (string) "time"))
        ;; Exported from this very file
        (export (get-internal-run-time)
                internal-time-units-per-second
                (atom? x)
                (iota start end)
                putprop )
        ;; From format.scm and pp.scm, do not export pp that already
        ;; exists in Bigloo.
        (export (format destination control-string . args))
        ;; to use Meroonet functions
        (import (rtbook "bigloo/rtbook.bgl"))
        )

;(display "[rtbook+.bgl...")(newline) ; DEBUG

;;; This variable is used in chap8k.scm to determine the underlying
;;; Scheme interpreter.

(define book-interpreter-support 'bigloo)

;;; Include an eval so exported global variables can also appear as symbols.
(eval ''hack) 

;;; Measure times.

(define (get-internal-run-time)
  (let ((t (make-string 4)))
    (time t) ) )
(define internal-time-units-per-second 1)

;;; My tests suppose that the atom? function is present

(define (atom? x) (not (pair? x)))

;;; I also like the iota function. (iota 0 4) -> (0 1 2 3)

(define (iota start end)
  (if (< start end)
      (cons start (iota (+ 1 start) end))
      '() ) )

(define (every? p . args)
  (let andmap ((args args) (value #t))
    (if (let any-at-end? ((ls args))
          (and (pair? ls)
               (or (not (pair? (car ls)))
                   (any-at-end? (cdr ls)))))
        value
        (let ((value (apply p (map car args))))
          (and value (andmap (map cdr args) value))))))

(define (any? p . args)
  (let ormap ((args args) (value #f))
    (if (let any-at-end? ((ls args))
          (and (pair? ls)
               (or (not (pair? (car ls)))
                   (any-at-end? (cdr ls)))))
        value
        (let ((value (apply p (map car args))))
          (or value (ormap (map cdr args) value))))))

;;; Sometimes, property lists are used.
(define putprop putprop!)

;;; Give a name to the some ports.
;;; These were the names in Scheme->C that I duplicate for Bigloo.

(define stdout-port (current-output-port))
(define stderr-port (current-error-port))

(define flush-buffer flush-output-port)

;;; Quick and dirty: sometimes very big objects are printed, limit
;;; them to something affordable.

(define *bounded-length* 4)
(define *bounded-depth* 3)

(define (bounded-display o stream)
  (define (print-list o* len dep)
    (cond ((null? o*) #t)
          ((atom? o*) (display " . " stream)
                      (display o* stream) )
          ((pair? o*) 
           (print (car o*) len (+ dep 1))
           (if (pair? (cdr o*)) (display " " stream))
           (print-list (cdr o*) (+ len 1) dep) ) ) )
  (define (print o len dep)
    (cond ((object? o) 
           (display "#<" stream)
           (display (Class-name (object->class o)) stream)
           (display ">" stream) )
          ((atom? o) (display o stream))
           (else (if (or (> len *bounded-length*)
                         (> dep *bounded-depth*) )
                     (display "&&&" stream)
                     (begin
                       (display "(" stream)
                       (print-list o len dep)
                       (display ")" stream) ) ) ) ) )
  (print o 0 0) )
;;; Test: (bounded-display (call-with-input-file "si/reflisp.scm" read) stdout-port)

;(display "]")(newline) ; DEBUG

;;; end of rtbook+.bgl
