;;; $Id: rtbook.bgl,v 1.9 1998/05/01 09:38:24 queinnec Exp queinnec $

;;;(((((((((((((((((((((((((((((((( L i S P ))))))))))))))))))))))))))))))))
;;; This file is part of the files that accompany the book:
;;;     LISP Implantation Semantique Programmation (InterEditions, France)
;;; By Christian Queinnec <Christian.Queinnec@INRIA.fr>
;;; Newest version may be retrieved from:
;;;   (IP 128.93.2.54) ftp.inria.fr:INRIA/Projects/icsla/Books/LiSP*.tar.gz
;;; Check the README file before using this file.
;;;(((((((((((((((((((((((((((((((( L i S P ))))))))))))))))))))))))))))))))

;;; This file defines some functions that should be included in programs
;;; compiled with the interpreter of the book.

(module rtbook
        (eval (export-all))
        ;; first, syntax-case is loaded    NO LONGER USEFUL FOR BIGLOO1.9c
        ;(include "bigloo/others/compat.ss")
        ;(include "bigloo/others/hooks.bgl")
        ;(include "bigloo/others/output.ss")
        ;(include "bigloo/others/init.ss")
        ;(include "bigloo/others/expand.bb")
        ;(include "bigloo/others/macro-defs.bb")
        ;; second, meroonet (preceded by a small hack that also 
        ;; defines the define-abbreviation macro)
        (include "bigloo/hack.bgl")
        (include "meroonet/meroonet.scm")
        ;; third, additional utilities
        (include "src/tester.scm")
        (export meroonet-error
                tester-error
                (test file)
                the-Point
                wrong
                static-wrong
                (list* . args)
                (syntax-case-load file)
                (start options) )
        ;; exported from syntax-case but no longer exported since 
        ;; expand-syntax is already present in Bigloo1.9d
        ;(export expand-syntax
        ;        void
        ;        )
        ;; exported from tester.scm
        (export (interpreter a b c d)
                (suite-test a b c d e f) )
        ;; exported from Meroonet
        (export (number->class n)
                (->Class name)
                (->Generic name)
                *last-defined-class*
                (object->class o)
                (Object? o)
                (symbol-concatenate . names)
                Object-class
                Class-class
                Generic-class
                Field-class
                Mono-Field-class
                Poly-Field-class
                (make-predicate class)
                (is-a? o class)
                (check-class-membership o class)
                (make-allocator class)
                (make-maker class)
                (retrieve-named-field class name)
                (make-reader field)
                (field-value o field . i)
                (make-writer field)
                (set-field-value! o v field . i)
                (make-lengther field)
                (field-length o field)
                (register-class name super-name own-field-descriptions)
                (Class-initialize! class name super own-field-descriptions)
                (Field-defining-class field)
                Class? 
                Generic?
                Field?
                Mono-Field?
                Poly-Field?
                Class-name
                set-Class-name!
                Class-number
                set-Class-number!
                Class-fields
                set-Class-fields!
                Class-superclass
                set-Class-superclass!
                Class-subclass-numbers
                set-Class-subclass-numbers!
                make-Class 
                allocate-Class
                make-Generic
                allocate-Generic
                Generic-name
                set-Generic-name!
                Generic-default
                set-Generic-default!
                Generic-dispatch-table
                set-Generic-dispatch-table!
                Generic-signature
                set-Generic-signature!
                Field-name
                set-Field-name!
                Field-defining-class-number
                set-Field-defining-class-number!
                make-Mono-Field
                allocate-Mono-Field
                make-Poly-Field
                allocate-Poly-Field
                (register-generic generic-name default signature)
                (register-method generic-name pre-method class-name signature)
                (determine-method generic o) )
        )

;(display "[rtbook.bgl...")(newline) ; DEBUG

;;; Include an eval so exported global variables can also appear as symbols.
(eval ''hack) 

;;;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
;;; Defines specific error handlers for meroonet.scm and tester.scm

(define meroonet-error 'wait)

(define tester-error 'wait)

;(set! tester-call/cc 
;      (lambda (f)
;        (bind-exit (k) (f k)) ) )

;;; This function will test meroonet on its test suite. It will also
;;; test the port of syntax-case. Note that expressions are read then
;;; expanded with the syntax-case package then submitted to eval (and
;;; therefore again expanded but this time by Bigloo).

(define (test file)
  (suite-test
   file "?? " "== " #t
   (lambda (read check err)
     (set! meroonet-error err)
     (set! tester-error err)
     (lambda ()
       (try ;(check (eval (expand-syntax (read))))
            ;; No longer useful to call explicitly expand-syntax in Bigloo1.9d
            (check (eval (read)))
            (lambda (k a b c) (err a b c) ) ) ) )
   equal? ) )

;;; This variable is needed by meroonet/oo-tests.scm test suite.

(define the-Point 'useful4tests)

;;; They also suppose some variables to be predefined such as wrong
;;; when runtime errors are caught or static-wrong for preparation
;;; errors.

(define wrong 'wait)
(define static-wrong 'wait)

;;;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
;;; Calls to this function might be generated by syntax-case.scm

(define (list* . args)
  (if (pair? args)
      (if (pair? (cdr args))
          (cons (car args) (apply list* (cdr args)))
          (car args) )
      (quote ()) ) )

;;;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
;;; A small toplevel loop that uses the syntax-case package of Hieb
;;; and Dybvig (define-syntax is used throughout the book). Since many
;;; of the tests of the book also use the load function, this one
;;; should be redefined to expand with syntax-case first.

(define (syntax-case-load file)
  (call-with-input-file file
    (lambda (in)
      (newline)
      (display ";;; Loading ")
      (display file)
      (newline)
      (let loop ((e (read in)))
        (if (eof-object? e) 
            file
            (let ;((r (eval (expand-syntax e))))
                ;; no longer needed in Bigloo1.9d
                ((r (eval e)))
              (display ";= ")
              (display r)
              (newline)
              (loop (read in)) ) ) ) ) ) )

(define (start options)
  (display "[C. Queinnec's book] Bigloo+Meroonet...")
  (newline)
  (set! *hygien?* #t)
  ;; This is a hack to redefine load without hurting the compiler:
  (eval '(set! load syntax-case-load))
  (interpreter
   "? " "= " #t
   (lambda (read print error)
     (set! tester-error   error)
     (set! meroonet-error error)
     (lambda ()
       (try ;(print (eval (expand-syntax (read))))
            ;; no longer needed in Bigloo1.9d
            (print (eval (read)))
            (lambda (k a b c) (error a b c)) ) ) ) )
  (display " Ite LiSP est.")
  (newline) )

;(display " ...")(newline) ; DEBUG

;;; The `show' and `clone' generic functions are predefined in Meroon
;;; not in Meroonet.  The problem is to define a generic function with
;;; Meroonet macros while these macros are only compiled and not yet
;;; present.

;;; The clone function that performs a shallow copy of a Meroonet object.

(set! *hygien?* #f)
(eval '
       (begin
          ;;(display " . . .")(newline) ; DEBUG
          (define-generic (show (o) . stream)
            (let ((stream (if (pair? stream) (car stream)
                              (current-output-port) )))
              (bounded-display o stream) ) )
          (define-generic (clone (o))
            (list->vector (vector->list o)) ) )
       )

;(display "]")(newline) ; DEBUG

;;; end of rtbook.bgl
